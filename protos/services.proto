syntax = "proto3";

/* Model Categories are semanically meaningful categoies. Each category
should be associated with one input type and one output type.
*/
enum ModelCategory {
  VISION_CLASSIFICATION = 0;
  TEXT_GENERATION = 1;
  IMAGE_SEGMENTATION = 2;
  IMAGE_CAPTIONING = 3;
}

message Image {
  map<string, string> metadata = 1;
  string image_data_url = 2;

  string model_uuid = 3;
  string access_token = 4;
}

message Text {
  map<string, string> metadata = 1;
  repeated string texts = 2;

  string model_uuid = 3;
  string access_token = 4;
}

message Table {
  map<string, string> metadata = 1;
  string model_uuid = 2;
  string access_token = 3;

  // Inspired from pandas orient="index"
  // >>> df.to_json(orient='index')
  // '{"row 1":{"col 1":"a","col 2":"b"},"row 2":{"col 1":"c","col 2":"d"}}'
  message Row { map<string, string> column_to_value = 1; }
  map<string, Row> table = 4;
  repeated string column_names = 5;
}

message ListModelsRequest {}
message ListModelsResponse {
  message Model {
    string model_name = 1;
    ModelCategory model_category = 2;
    string uuid = 3;
  }
  repeated Model models = 1;
}

/*
TODO(rehan): plz fix the following a bit for auth
*/
message ModelUUIDRequest {
  string model_name = 1;
  string token = 2;
}
message ModelUUIDResponse { string model_uuid = 1; }

// Downloader
message ImageDownloadRequest { string url = 1; }
message ImageDownloadResponse { string image = 1; }

service Model {
  // Inference
  rpc VisionClassification(Image) returns (Table) {}
  rpc TextGeneration(Text) returns (Text) {}
  rpc ImageSegmentation(Image) returns (Image) {}
  rpc ImageCaption(Image) returns (Text) {}

  // Website utils
  rpc GetImage(ImageDownloadRequest) returns (ImageDownloadResponse) {}

  // Database
  rpc ListModels(ListModelsRequest) returns (ListModelsResponse) {}
  rpc ModelUUID(ModelUUIDRequest) returns (ModelUUIDResponse) {}
}
